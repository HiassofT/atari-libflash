;  bflash - program Bernd's 512k Megacart
;
;  Copyright (C) 2004-2010 Matthias Reichl <hias@horus.com>
;
;  This program is free software; you can redistribute it and/or modify
;  it under the terms of the GNU General Public License as published by
;  the Free Software Foundation; either version 2 of the License, or
;  (at your option) any later version.
;
;  This program is distributed in the hope that it will be useful,
;  but WITHOUT ANY WARRANTY; without even the implied warranty of
;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;  GNU General Public License for more details.
;
;  You should have received a copy of the GNU General Public License
;  along with this program; if not, write to the Free Software
;  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

	.include "cio.inc"
	.include "libflash.inc"

START	= $2000

	.BANK
	* = START

	JSR INIT

MAINLP	BPUT 0, TITLEN, TITLE
	JSR FENABLE
	JSR FDETECT
	JSR FDISABLE

	LDA FTYPE
	JSR PFTYPE
	LDA FTYPE
	BPL MOK

	JSR GETCHAR
	BPL MAINLP
	JMP EXIT

MOK	BPUT 0, MENULEN, MENU
MENULP	JSR GETCHAR
	CPY #128
	BNE MENUL1
	JMP MAINLP
MENUL1	CMP #'0
	BNE NEXIT
EXIT	JSR CLEANUP
	JMP ($A)

NEXIT	CMP #'1
	BNE NO1

	JMP DOFLASH

NO1	CMP #'2
	BNE NO2

	JMP DOWRITE

NO2	CMP #'3
	BNE NO3

	JMP DOERAS

NO3	JMP MENULP

DOERAS	JSR PUTCHAR
	LDA #155
	JSR PUTCHAR

	BPUT 0, ASKERAL, ASKERA
	JSR YESNO
	BEQ DOERAS1
	JMP MAINLP

DOERAS1	LDA #155
	JSR PUTCHAR
	LDA #155
	JSR PUTCHAR

	BPUT 0, ERASTL, ERAST

	JSR FENABLE
	SETFADRI 0,0
	JSR FCERAS
	PHP
	JSR FDISABLE
	PLP
	JSR PSTAT

AGAIN	BPUT 0, AGATL, AGAT
	JSR GETCHAR
	JMP MAINLP

DOWRITE	JMP MAINLP

DOFLASH	JSR PUTCHAR
	LDA #155
	JSR PUTCHAR

; flash offset 0
	LDA #0
	STA MYADR
	STA MYADR+1
	STA MYADR+2

	BPUT 0, FNTXTL, FNTXT
	JSR GETFN
	BPL DOFL0
	JMP MAINLP

DOFL0	OPEN 1,4,0,FNBUF
	BPL DOFL1
	CLOSE 1
	PRINT 0, OPENERR
	JSR GETCHAR
	JMP MAINLP

DOFL1	LDA #155
	JSR PUTCHAR

	BPUT 0, ERASTL, ERAST

	JSR FENABLE
	SETFADRI 0,0
	JSR FCERAS
	PHP
	JSR FDISABLE
	PLP
	BPL DOFL2
	JSR PERROR

AGAINCL	CLOSE 1
	JMP AGAIN

DOFL2	JSR POK

PROGLP	BGET 1, 1, DATABUF
	BPL NXTBLK
	JMP AGAINCL

NXTBLK	JSR PFLADR

	BPUT 0, BNKRDL, BNKRD
	BGET 1, 8191, DATABUF+1
	BPL RDFOK

RDERR	JSR PERROR
	JMP AGAINCL

RDFOK	JSR POK

	BPUT 0, PROGL, PROG

	JSR FENABLE
	SETDADRI DATABUF
	SETFADR MYADR
	LDX #32		; program 32*256=8192 bytes
	JSR FWPAGE
	PHP
	JSR FDISABLE
	PLP
	BPL PROGOK
	JSR PERROR
	JMP AGAINCL

PROGOK	JSR POK
	CLC
	LDA MYADR+1
	ADC #$20
	STA MYADR+1
	BCC PROG1
	INC MYADR+2

PROG1	LDA MYADR+2
	CMP #8
	BEQ ENDPROG
	JMP PROGLP

ENDPROG	JMP AGAINCL


INIT	LDA 106
	STA M106
	LDA 740
	STA M740
	LDA #$80
	STA 106
	STA 740
	JSR GR0

	LDA $D301
	STA MD301
	ORA #2
	STA $D301
	RTS

CLEANUP	LDA MD301
	STA $D301
	LDA M106
	STA 106
	LDA M740
	STA 740
	JMP GR0

M106	.BYTE 0
M740	.BYTE 0
MD301	.BYTE 0


.IF 0
	JSR CARTON

	JSR ERASE2
	BPL EOK0

	JSR CARTOFF
	JSR PERROR
	JMP AGAIN

EOK0	JSR CARTOFF
	JSR POK
	JMP AGAIN

; write flash to file

DOWRITE	JSR PUTCHAR
	LDA #155
	JSR PUTCHAR

	LDA #0
	STA BANKNO

	JSR GETSZ
	BPL DOWR0
	JMP AGAIN

DOWR0	JSR GETFN
	BPL DOWR1
	JMP MAINLP
DOWR1	BCS DOWR2
	JMP AGAIN

DOWR2	OPEN 1,8,0,BUF
	BPL DOWR3
	CLOSE 1
	PRINT 0, OPENERR
	JMP AGAIN

DOWR3	JSR CARTON

WRFLP	JSR PBANK

	LDX BANKNO
	STA BANKREG,X

	LDA #<BASE
	STA SRCADR
	LDA #>BASE
	STA SRCADR+1
	LDA #<DATA
	STA DSTADR
	LDA #>DATA
	STA DSTADR+1

	LDX #>(END-BASE)
	LDY #0
DOWR4	LDA (SRCADR),Y
	STA (DSTADR),Y
	INY
	BNE DOWR4
	INC SRCADR+1
	INC DSTADR+1
	DEX
	BNE DOWR4

	BPUT 0, BNKWRL, BNKWR
	BPUT 1, 8192, DATA
	BPL WRFOK

	JSR CARTOFF
	JSR PERROR
	CLOSE 1
	JMP AGAIN

WRFOK	JSR POK
	INC BANKNO
	LDA BANKNO
	CMP NUMBANK
	BEQ WRFIN
	JMP WRFLP

WRFIN	CLOSE 1
	JMP AGAIN


; program flash

DOFLASH	JSR PUTCHAR
	LDA #155
	JSR PUTCHAR

	LDA #128
	STA NUMBANK
	LDA #0
	STA BANKNO
	STA BANKOFS

	JSR GETFN
	BPL INBOK3
	JMP MAINLP
INBOK3	BCS FNDDRV
	JMP AGAIN

FNDDRV	OPEN 1,4,0,BUF
	BPL DOFL1
;	BPL DOFL3
	CLOSE 1
	PRINT 0, OPENERR
	JMP AGAIN

DOFL1	LDA #155
	JSR PUTCHAR

	BPUT 0, ERASL, ERAS

	JSR CARTON

	JSR ERASE2
	BPL DOFL2
	JSR CARTOFF
	JSR PERROR
	CLOSE 1
	JMP AGAIN

DOFL2	JSR POK

DOFL3	JSR CARTON

PROGLP	BGET 1, 1, DATA
	BPL NXTBLK
	JMP NNXT

NXTBLK	JSR PBANK

	BPUT 0, BNKRDL, BNKRD
	BGET 1, 8191, DATA+1
	BPL RDFOK

RDERR	JSR CARTOFF
	JSR PERROR
	CLOSE 1
	JMP AGAIN

RDFOK	JSR POK

	LDA BANKNO
	AND BANKMSK
	STA BANKOFS

	LDA #<DATA
	STA SRCADR
	LDA #>DATA
	STA SRCADR+1
	LDA #<BASE
	STA DSTADR
	LDA #>BASE
	STA DSTADR+1

	BPUT 0, PROGL, PROG

	JSR PROGBLK
	BPL POK1

	BPUT 0, PRGERRL, PRGERRT

	LDA DSTADR+1
	JSR PUTHEX
	LDA DSTADR
	JSR PUTHEX
	LDA #155
	JSR PUTCHAR
	JMP NNXT

POK1	JSR POK
	LDA #<DATA
	STA SRCADR
	LDA #>DATA
	STA SRCADR+1
	LDA #<BASE
	STA DSTADR
	LDA #>BASE
	STA DSTADR+1

	BPUT 0, VFYTL, VFYT

	JSR VERIFY
	BPL VOK1

	BPUT 0, VFYERRL, VFYERRT

	LDA DSTADR+1
	JSR PUTHEX
	LDA DSTADR
	JSR PUTHEX
	LDA #155
	JSR PUTCHAR
	JMP NNXT
	
VOK1	JSR POK
	INC BANKNO
	LDA BANKNO
	CMP NUMBANK
	BCS NNXT
	JMP PROGLP

NNXT	JSR CARTOFF
	CLOSE 1


; wait for any key and restart program

AGAIN	JSR CARTOFF
	BPUT 0, AGATL, AGAT
AGALP	LDA #255
	STA 764
	JSR GETCHAR
;	BMI AGALP
	JMP MAINLP


YESNO	JSR GETCHAR
	CPY #128
	BEQ YBRK
	CMP #'Y
	BEQ YYES
	CMP #'y
	BEQ YYES
	CMP #'N
	BEQ YNO
	CMP #'n
	BEQ YNO
	JMP YESNO
YNO	LDX #1
YYES	PHP
	JSR PUTCHAR
	PLP
	RTS

YBRK	LDY #$FF
	RTS	; return with N=1

; input filename

GETFN	BPUT 0, FNTXTL, FNTXT
	INPUT 0, BUF
	BPL GETFN1
GETFNER	LDA #$FF
	RTS

GETFN1	LDA BUF
	CMP #155
	BEQ GETFNER
	LDX #0
GETFN2	LDA BUF,X
	CMP #':
	BEQ GETFNOK
	CMP #155
	BEQ GETFN3
	INX
	BPL GETFN2

GETFNX	LDA #0
	CLC
	RTS

GETFN3	LDA BUF,X
	STA BUF+2,X
	DEX
	BPL GETFN3
	LDA #'D
	STA BUF
	LDA #':
	STA BUF+1
GETFNOK	LDA #0
	SEC
	RTS

; input size

GETSZ	BPUT 0, SIZETL, SIZET
SIZELP	JSR GETCHAR
	CPY #128
	BNE SIZEL1
	LDY #$FF
	RTS
SIZEL1	CMP #'1
	BCC SIZELP
	CMP #'9
	BCS SIZELP
	PHA
	JSR PUTCHAR
	LDA #155
	JSR PUTCHAR
	PLA
	SEC
	SBC #'1
	TAX
	LDA SZTAB,X
	STA NUMBANK
	LDY #0
	RTS

GR0	CLOSE 0
	OPEN 0,12,0,EDITOR
	LDA 20
	CLC
	ADC #2
WVBI	CMP 20
	BNE WVBI
	RTS


INIT	LDA 106
	STA M106
	LDA 740
	STA M740
	LDA #$80
	STA 106
	STA 740
	JSR GR0

	LDA $D301
	STA MD301
	ORA #2
	STA $D301
	
	JSR CARTOFF
	RTS


CLEANUP	LDA MD301
	STA $D301
	LDA M106
	STA 106
	LDA M740
	STA 740
	JMP GR0

CARTON	SEI
	LDA #0
	STA $D40E
	STA BANKREG
	LDA TRIG3
	STA GINTLK
	LDA #$40
	STA $D40E
	CLI
	RTS
        
CARTOFF	SEI
	LDA #0
	STA $D40E
	STA BANKOFF
	LDA TRIG3
	STA GINTLK
	LDA #$40
	STA $D40E
	CLI
	RTS

; program an 8k flash block

PROGBLK
;	SEI
;	LDA #0
;	STA $D40E
;	STA $D400
;	LDA BANKNO
;	ASL
;	ASL
;	ASL
;	ASL
;	STA BANKCOL

	LDA TYPE
	CMP #TAMD
	BNE PRGN1

	LDA #<PRGOLD
	STA PROGLP2+1
	LDA #>PRGOLD
	STA PROGLP2+2
	JMP PROGLP1

PRGN1	LDA #<PRGNEW
	STA PROGLP2+1
	LDA #>PRGNEW
	STA PROGLP2+2
	JMP PROGLP1

PROGLP1	LDA #0
	STA PROGIDX
	
PROGLP2	JSR $1234
	LDX BANKNO
	STA BANKREG,X
	LDY PROGIDX
	LDA (SRCADR),Y
	STA (DSTADR),Y

	JSR WTDATA

	BMI PROGERR

PROGOK	INC PROGIDX
	BNE PROGLP2
	INC SRCADR+1
	INC DSTADR+1
	LDA DSTADR+1
	CMP #>END
	BNE PROGLP2

PROGEND	CLI
	LDA #$40
	STA $D40E
	RTS

PROGERR	CLI
	LDA #$40
	STA $D40E
	STY DSTADR
	LDA #$FF
	RTS

PROGSST JSR SENDSIG
	LDX BANKNO
	STA BANKREG,X
	
	LDY #0
PPAGLP	LDA (SRCADR),Y
	STA (DSTADR),Y
	INY
	CPY #$80
	BNE PPAGLP

	LDY #127
WTDLP2	LDA (DSTADR),Y
	EOR (DSTADR),Y
	AND #$40
	BNE WTDLP2

	CLC
	LDA SRCADR
	ADC #128
	STA SRCADR
	BCC NI2
	INC SRCADR+1
NI2	CLC
	LDA DSTADR
	ADC #128
	STA DSTADR
	BCC PROGSST
	INC DSTADR+1
	LDA DSTADR+1
	CMP #>END
	BEQ SSTEND
	LSR
	AND #$0F
	ORA BANKCOL
	STA $D01A
	JMP PROGSST

SSTEND	LDA #$40
	STA $D40E
	CLI
	LDA #0
	RTS

PWERR	TYA
	CLC
	ADC DSTADR
	STA DSTADR
	BCC XSST
	INC DSTADR+1
XSST	LDA #$40
	STA $D40E
	CLI
	LDA #$FF
	RTS

WAIT	LDY #0
WTLP	DEY
	BNE WTLP
	DEX
	BNE WTLP
	RTS

VERIFY	LDX BANKNO
	STA BANKREG,X

	LDY #0
VERLP	LDA (DSTADR),Y
	CMP (SRCADR),Y
	BNE VERERR
	INY
	BNE VERLP
	BEQ VEROK

VERERR	STY DSTADR
	LDA #$FF
	RTS

VEROK	INC SRCADR+1
	INC DSTADR+1
	LDA DSTADR+1
	CMP #>END
	BNE VERIFY
	LDA #0
	RTS

	.MACRO ADDSIG ; address, value
	.IF %0 <> 2
	.ERROR "ADDSIG requires 2 parameters"
	.ELSE
	LDX SIGLEN
	LDA #>%1
	LSR
	LSR
	LSR
	LSR
	LSR
	CLC
	ADC BANKOFS
	STA SIGBUFB,X
	LDA #<%1
	STA SIGBUFL,X
	CLC
	LDA #>%1
	AND #$1F
	ADC #>BASE
	STA SIGBUFH,X
	LDA #%2
	STA SIGBUFA,X
	INC SIGLEN
	.ENDIF
	.ENDM

SETSIG	LDA #0
	STA SIGLEN
	LDA TYPE
	CMP #TAMD40
	BEQ SIGA40

; signature AM 29F010 / BM 29F040
	ADDSIG $5555, $AA
	ADDSIG $2AAA, $55
	RTS

; signature AMD 29F040 / ST 29F010 / ST 29F040B
SIGA40	ADDSIG $0555, $AA
	ADDSIG $02AA, $55
	RTS

SIGTMP	.BYTE 0

SIGBUFB	.DC 16 0
SIGBUFL	.DC 16 0
SIGBUFH	.DC 16 0
SIGBUFA	.DC 16 0

SIGLEN	.BYTE 0

; set read mode
SIGREAD	JSR SETSIG
	ADDSIG $5555, $F0
	RTS

; chip erase signature
SIGERAS	JSR SETSIG

	LDA TYPE
	CMP #TAMD40
	BNE SERAMD
	JMP SERA40

; signature AM 29F010 / BM 29F040
SERAMD	ADDSIG $5555, $80
	ADDSIG $5555, $AA
	ADDSIG $2AAA, $55
	ADDSIG $5555, $10
	RTS

; signature AMD 29F040 / ST 29F010
SERA40	ADDSIG $0555, $80
	ADDSIG $0555, $AA
	ADDSIG $02AA, $55
	ADDSIG $0555, $10
	RTS

; chip id signature
SIGID	JSR SETSIG
	LDA TYPE
	CMP #TAMD
	BEQ SIDAMD
	CMP #TAMD40
	BEQ SIDA40
;	JMP SIDSST

; id AMD 29F010 / BM 29F040
SIDAMD	ADDSIG $5555, $90
	RTS

; id AMD 29F040 / ST 29F010
SIDA40	ADDSIG $0555, $90
	RTS

; id SST 29EE010, Winbond 29EE011
SIDSST	ADDSIG $5555, $80
	ADDSIG $5555, $AA
	ADDSIG $2AAA, $55
	ADDSIG $5555, $60
	RTS

; program byte/page signature
SIGPRG	JSR SETSIG
	LDA TYPE
	CMP #TAMD40
	BEQ SPRA40

; program AMD 29F010, SST 29EE010, Winbond 29EE011
SPRAMD	ADDSIG $5555, $A0
	RTS

; program AMD 29F040 / ST 29F010
SPRA40	ADDSIG $0555, $A0
	RTS

SENDSIG	LDA #0
	STA SIGTMP
SSLP	LDY SIGTMP
	LDX SIGBUFB,Y
	STA BANKREG,X
	LDA SIGBUFL,Y
	STA TMPADR
	LDA SIGBUFH,Y
	STA TMPADR+1
	LDA SIGBUFA,Y
	LDY #0
	STA (TMPADR),Y
	INC SIGTMP
	LDA SIGTMP
	CMP SIGLEN
	BNE SSLP
	RTS


; new fast programming signature for older chips

PRGOLD  LDX BANKOFS
; $5555 = $AA
	LDA #$AA
	STA BANKREG+2,X
	STA BASE+$1555
; $2AAA = $55
	LDA #$55
	STA BANKREG+1,X
	STA BASE+$AAA
; $5555 = $A0
	LDA #$A0
	STA BANKREG+2,X
	STA BASE+$1555

        RTS

; new fast programming signature for newer chips

PRGNEW  LDX BANKOFS
	STA BANKREG,X
; $555 = $AA
	LDA #$AA
	STA BASE+$555
; $2AA = $55
	LDA #$55
	STA BASE+$2AA
; $555 = $A0
	LDA #$A0
	STA BASE+$555

        RTS



	.MACRO RDADR
	STX TMPADR
	STY TMPADR+1
	TAY
	STA BANKREG,Y
	LDY #0
	LDA (TMPADR),Y
	.ENDM

SETREAD	LDX #5
	JSR WAIT
	JSR SIGREAD
	JSR SENDSIG
	LDX #5
	JSR WAIT
	RTS

SETID	LDX #5
	JSR WAIT
	JSR SIGID
	JSR SENDSIG
	LDX #5
	JSR WAIT
	RTS

; erase both flash chips

ERASE2	LDA #0
	STA BANKOFS

;	LDA #'1
;	JSR PUTCHAR

	JSR ERASE
	BMI E2ERR

	LDA #64
	STA BANKOFS

;	LDA #'2
;	JSR PUTCHAR

	JSR ERASE
	BMI E2ERR
	RTS

E2ERR	JSR SETREAD
	LDY #$FF
	RTS

; erase complete chip

ERASE	JSR SIGERAS
	JSR SENDSIG

ERCH2	LDA #<BASE
	STA DSTADR
	LDA #>BASE
	STA DSTADR+1

	LDY #0
	LDA #$FF

; DQ7 polling algorithm

WTDATA	AND #$80
	STA WTBYTE
WTDLP	LDA (DSTADR),Y
	EOR WTBYTE
	BPL WTDOK
	AND #$20
	BEQ WTDLP
	LDA (DSTADR),Y
	EOR WTBYTE
	BPL WTDOK
	JSR SETREAD
	LDY #$FF
	RTS

WTDOK	LDY #$00
	RTS

WTBYTE	.BYTE 0


DETECT	JSR CARTOFF

	LDA TRIG3
	BEQ DET0

DETERR	JSR CARTOFF
	PRINT 0,NOFLTXT
	LDA #$FF
	RTS

DET0	JSR CARTON
	LDA TRIG3
	BEQ DETERR

	LDA #128
	STA NUMBANK
	LDA #0
	STA BANKOFS
	LDA #64
	STA BANKMSK

	LDA #TAMD40
	STA TYPE
	JSR SETREAD
	JSR SETID
	
	STA BANKREG
	LDA BASE
	CMP #$01
	BNE NOAMD40
	LDA BASE+1
	CMP #$A4
	BNE NOAMD40

	PRINT 0, DETA40T
	LDA #0
	RTS

NOAMD40	LDA BASE
	CMP #$20
	BNE NOST40
	LDA BASE+1
	CMP #$E2
	BNE NOST40

	PRINT 0, DETS40T
	LDA #0
	RTS

NOST40	LDA #TAMD
	STA TYPE
	JSR SETREAD
	JSR SETID

	LDA BASE
	CMP #$AD
	BNE NOBM40
	LDA BASE+1
	CMP #$40
	BNE NOBM40

	PRINT 0, DETB40T
	LDA #0
	RTS

NOBM40	PRINT 0, UNKFL
	LDA #$FF
	RTS

PUTCHAR	TAY
	LDA $E407
	PHA
	LDA $E406
	PHA
	TYA
	RTS

GETCHAR	LDA $E425
	PHA
	LDA $E424
	PHA
	RTS

PUTHEX	PHA
	LSR
	LSR
	LSR
	LSR
	TAX
	LDA HEXTAB,X
	JSR PUTCHAR
	PLA
	AND #$0F
	TAX
	LDA HEXTAB,X
	JMP PUTCHAR

POK	PRINT 0, OKT
	RTS

PERROR	PRINT 0, ERRT
	RTS

; print bank number
PBANK	CLC
	LDA BANKNO
	JSR TODEC
	CLC
	LDA DECBUF
	ADC #'0
	ORA #$80
	STA BANKCH
	CLC
	LDA DECBUF+1
	ADC #'0
	ORA #$80
	STA BANKCH+1
	CLC
	LDA DECBUF+2
	ADC #'0
	ORA #$80
	STA BANKCH+2
	PRINT 0, BNKTXT
	RTS

TODEC	LDX #2
	CMP #200
	BCC TODEC1
	SBC #200
	JMP TODEC00
TODEC1	DEX
	CMP #100
	BCC TODEC0
	SBC #100
	JMP TODEC00
TODEC0	DEX
TODEC00	STX DECBUF

	TAY
	LDX #0
TDLP	CPY #10
	BCC TDEND
	INX
	TYA
	SEC
	SBC #10
	TAY
	JMP TDLP
TDEND	STX DECBUF+1
	STY DECBUF+2
	RTS

PRDEC	JSR TODEC
	LDA DECBUF
	BNE PRDEC3	; 3 digits
	LDA DECBUF+1
	BNE PRDEC2	; 2 digits
	BEQ PRDEC1	; 1 digit

PRDEC3	CLC
	LDA DECBUF
	ADC #'0
	JSR PUTCHAR
PRDEC2	CLC
	LDA DECBUF+1
	ADC #'0
	JSR PUTCHAR
PRDEC1	CLC
	LDA DECBUF+2
	ADC #'0
	JSR PUTCHAR
	RTS

DECBUF	.DC 3 0


M106	.BYTE 0
M740	.BYTE 0
MD301	.BYTE 0

; flash type
TYPE	.BYTE 0

; program mode: 
PMODE	.BYTE 0

; total number of banks to read/write
NUMBANK	.BYTE 0

; current bank number
BANKNO	.BYTE 0

; offset and masks for multi-chip 8mbit cart
BANKMSK	.BYTE 0

HEXTAB	.BYTE "0123456789ABCDEF"
	
SIZET	.BYTE 155
	.BYTE "enter size",155
	.BYTE "1) 8k",155
	.BYTE "2) 16k",155
	.BYTE "3) 32k",155
	.BYTE "4) 64k",155
	.BYTE "5) 128k",155
	.BYTE "6) 256k",155
	.BYTE "7) 512k",155
	.BYTE "8) 1024k",155
	.BYTE "> "
SIZETL	= * - SIZET

SZTAB	.BYTE 1, 2, 4, 8, 16, 32, 64, 128


EDITOR	.BYTE "E:",155
NOFLTXT	.BYTE "No flash cart detected",155
UNKFL	.BYTE "Unknown flash",155


BNKTXT	.BYTE $99
	.BYTE +$80,"Bank "
BANKCH	.BYTE +$80,"000"
	.BYTE $19,155

VFYT	.BYTE "   verifying: "
VFYTL	= * - VFYT

OKT	.BYTE "OK", 155
ERRT	.BYTE "ERROR", 253, 155

PRGERRT	.BYTE 155, "Error programming address "
PRGERRL	= * - PRGERRT

VFYERRT	.BYTE 155, "Error verifying address "
VFYERRL	= * - VFYERRT

IBANK	.BYTE "Invalid bank number",155
IBANKL	= * -IBANK

IBANKB	.BYTE "Number is not multiple of block size",155
IBANKBL	= * - IBANKB

BANKCOL	.BYTE 0
.endif

FA10T	.BYTE "Detected ", $99
	.BYTE +$80,"AMD 29F010"
	.BYTE $19,155

FA10BT	.BYTE "Detected ", $99
	.BYTE +$80,"AMD 29F010B"
	.BYTE $19,155

FA40BT	.BYTE "Detected ", $99
	.BYTE +$80,"AMD 29F040B"
	.BYTE $19,155

FS10BT	.BYTE "Detected ", $99
	.BYTE +$80,"ST 29F010B"
	.BYTE $19,155

FS40BT	.BYTE "Detected ", $99
	.BYTE +$80,"ST 29F040B"
	.BYTE $19,155

FB40T	.BYTE "Detected ", $99
	.BYTE +$80,"BM 29F040"
	.BYTE $19,155

UNKFLT	.BYTE "No or unknown flash",155


; print flash type
PFTYPE	CMP #TAMD10
	BNE PFTYPE1
	PRINT 0, FA10T
	RTS
PFTYPE1	CMP #TAMD10B
	BNE PFTYPE2
	PRINT 0, FA10BT
	RTS
PFTYPE2	CMP #TAMD40B
	BNE PFTYPE3
	PRINT 0, FA40BT
	RTS
PFTYPE3	CMP #TST10B
	BNE PFTYPE4
	PRINT 0, FS10BT
	RTS
PFTYPE4	CMP #TST40B
	BNE PFTYPE5
	PRINT 0, FS40BT
	RTS
PFTYPE5	CMP #TBM40
	BNE PFTYPE6
	PRINT 0, FB40T
	RTS

PFTYPE6	PRINT 0, UNKFLT
	RTS

; print flash address
PFLADR	LDA #$99
	JSR PUTCHAR
	LDA MYADR+2
	JSR PUTHEXI
	LDA MYADR+1
	JSR PUTHEXI
	LDA MYADR+0
	JSR PUTHEXI
	LDA #$19
	JSR PUTCHAR
	LDA #155
	JMP PUTCHAR

TITLE	.BYTE 125, "512k Mega FlashCart Writer V0.1",155
	.BYTE "(c) 2010 by Matthias Reichl",155,155
TITLEN	= * - TITLE

MENU	.BYTE 155
	.BYTE "1) Program flash cart",155
	.BYTE "2) Write flash cart to file",155
	.BYTE "3) Erase flash cart",155
	.BYTE "0) Exit program",155
	.BYTE "> "
MENULEN	= * - MENU

ASKERA	.BYTE "Completely erase flash cart (y/n)? "
ASKERAL	= * - ASKERA

ERAST	.BYTE "erasing cart: "
ERASTL	= * - ERAST

FNTXT	.BYTE "Filename > "
FNTXTL	= * - FNTXT

OPENERR	.BYTE "Error opening file!",155

BNKRD	.BYTE "reading data: "
BNKRDL	= * - BNKRD

BNKWR	.BYTE "writing data: "
BNKWRL	= * - BNKWR

PROG	.BYTE " programming: "
PROGL	= * - PROG

AGAT	.BYTE 155
	.BYTE "Press any key to continue > "
AGATL	= * - AGAT


; 3-byte flash offset
MYADR	.BYTE 0,0,0


	.include "libflash-mega512.src"
	.include "iohelp.src"

BUF	.DC 128 0

	* = (*+255) & $FF00
DATABUF	= *

	.BANK
	* = $2E0
	.WORD START

