;  flash - simple flash programmer
;
;  Copyright (C) 2004-2015 Matthias Reichl <hias@horus.com>
;
;  This program is free software; you can redistribute it and/or modify
;  it under the terms of the GNU General Public License as published by
;  the Free Software Foundation; either version 2 of the License, or
;  (at your option) any later version.
;
;  This program is distributed in the hope that it will be useful,
;  but WITHOUT ANY WARRANTY; without even the implied warranty of
;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;  GNU General Public License for more details.
;
;  You should have received a copy of the GNU General Public License
;  along with this program; if not, write to the Free Software
;  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

	.include "cio.inc"
	.include "libflash.inc"

START	= $2000

	.BANK
	* = START

	JSR INIT

MAINLP	BPUT0 TTITLE
	JSR FINIT
	JSR FENABLE
	JSR FDETECT
	JSR FDISABLE

	LDA FTYPE
	STA FFTYPE
	JSR PFTYPE
	LDA FTYPE
	BPL MOK

	JSR GETCHAR
	CPY #128
	BNE MAINLP
	JMP EXIT

MOK	LDA FSIZE
	STA SIZE
	LDA FSIZE+1
	STA SIZE+1
	LDA FSIZE+2
	STA SIZE+2
	LDA FSIZE+3
	STA SIZE+3
	LDA #1
	STA NUMCHIP
.if [ .def ATARIMAX8 ] .or [ .def MEGAMAX16 ] .or [ .def FREEZER2011 ]
	ASL SIZE
	ROL SIZE+1
	ROL SIZE+2
	ROL SIZE+3
	INC NUMCHIP
.endif
	LDX SIZE+1
	LDY SIZE+2
	JSR ADR2BNK
	STA SIZEB

	LDA #0
	STA NEEDERAS
	LDA FBLKMSK
	ORA FBLKMSK+1
	ORA FBLKMSK+2
	ORA FBLKMSK+3
	BEQ ?CNOERAS
	INC NEEDERAS
?CNOERAS

	BPUT0 TMENU
MENULP	JSR GETCHAR
	CPY #128
	BNE MENUL1
	JMP MAINLP
MENUL1	CMP #'0
	BNE NEXIT
EXIT	JSR CLEANUP
	JMP ($A)

NEXIT	CMP #'1
	BNE NO1

	LDX #MODEP
	JMP DOCOMMON

NO1	CMP #'2
	BNE NO2

	LDX #MODEV
	JMP DOCOMMON

NO2	CMP #'3
	BNE NO3

	LDX #MODED
	JMP DOCOMMON

NO3	CMP #'4
	BNE NO4

	JMP DOERAS

NO4	JMP MENULP



MODE	.BYTE 0
MODEP	= $00	; program flash
MODEV	= $40	; verify
MODED	= $80	; dump flash to file

; total flash size
SIZE	.WORD 0,0

; flash size in 8k banks
SIZEB	.BYTE 0

; ending address of read/write/verify
ENDADR	.WORD 0,0

;ENDHI	.BYTE 0

; number of flash chips
NUMCHIP	.BYTE 0

; flag: chip needs erasing
NEEDERAS .BYTE 0

; remember flash type
FFTYPE	.BYTE 0

TMPSTAT	.BYTE 0

; common entry point
DOCOMMON
	STX MODE

	JSR PUTCHAR
	LDA #155
	JSR PUTCHAR
	LDA #155
	JSR PUTCHAR

; flash offset 0
	JSR FADRZERO

; ask for starting/ending bank etc
	JSR RRANGE
	BPL ?RROK
	JMP DOCONT

?RROK

; set data buffer address
	LDA #<DATABUF
	STA DATAADR
	LDA #>DATABUF
	STA DATAADR+1

	BPUT0 TFILNA
	JSR GETFN
	BPL DOCOMM1
	JMP MAINLP

DOCOMM1	BIT MODE
	BMI DOCOMM2
	OPEN 1,4,0,FNBUF
	JMP DOCOMM3

DOCOMM2	OPEN 1,8,0,FNBUF
DOCOMM3	BPL DOCOMM4
	CLOSE 1
	PRINT 0, TOPENER
	JMP DOCONT

DOCOMER	JSR PERROR

DOCOMEX	CLOSE 1
	JMP DOCONT

DOCOMM4	LDA #155
	JSR PUTCHAR

; flash/write/verify data, depending on MODE
DOLOOP	BIT MODE
	BPL DOLOOP0	; flash/verify mode
	JMP DOLOOPW	; write mode

; flash/verify: check if we have some more data
DOLOOP0	BGET 1, 1, DATABUF
	BPL DOLOOP1

; no, end of file
DOLPOK	CLOSE 1
	JMP DOCONTS	; report success

DOLOOP1	JSR PFLBNK

; read rest of data block
	BPUT0 TRDDAT
	BGET 1, 8191, DATABUF+1
	BPL DOLOOP2
	JMP DOCOMER

DOLOOP2	BIT MODE
	BVC ?DOL1
	JMP DOLOOPV	; verify flash

?DOL1	LDA NEEDERAS
	BEQ ?NOERAS

	LDA FLASHADR
	AND FBLKMSK
	BNE ?NOERAS

	LDA FLASHADR+1
	AND FBLKMSK+1
	BNE ?NOERAS

	LDA FLASHADR+2
	AND FBLKMSK+2
	BNE ?NOERAS

	LDA FLASHADR+3
	AND FBLKMSK+3
	BNE ?NOERAS

; erase block
	BPUT0 TERAF
	JSR FENABLE
	JSR FPERAS
	PHP
	JSR FDISABLE
	PLP
	BMI DOLPERA
; check for 4k blocksize flash
	LDA FBLKMSK+1
	CMP #$0F
	BNE ?NOERAS
; yes, we have a 4k flash, also erase next 4k
	LDA FLASHADR+1
	ORA #$10        ; add $1000 to address
	STA FLASHADR+1
	JSR FENABLE
	JSR FPERAS
	PHP
	LDA FLASHADR+1
	AND #$E0        ; restore old 8k address
	STA FLASHADR+1
	JSR FDISABLE
	PLP
	BMI DOLPERA

?NOERAS

; program block
	BPUT0 TPROGF

	JSR FENABLE
	LDX #$20
	JSR FWPAGE
	PHP
	JSR FDISABLE
	PLP

; entry: check for error
DOLPST	BPL DOLOOPN

; print error plus address
DOLPERA	JSR PERRADR
	JSR PERRTYP
	JMP DOCOMEX

; print ok and go on to next block
DOLOOPN	JSR POK
	CLC
	LDA FLASHADR+1
	ADC #$20
	STA FLASHADR+1
	BCC DOLOOP3
	INC FLASHADR+2

DOLOOP3	LDA FLASHADR+2
	CMP ENDADR+2
	BCC DOLOOP4
	BNE DOLOOPX

	LDA FLASHADR+1
	CMP ENDADR+1
	BCC DOLOOP4
DOLOOPX	JMP DOLPOK

DOLOOP4	JMP DOLOOP

; verify block
DOLOOPV	BPUT0 TVERIF
	JSR FENABLE
	LDX #$20
	JSR FCPAGE
	PHP
	JSR FDISABLE
	PLP
	JMP DOLPST

; write block to file
DOLOOPW	JSR PFLBNK
	JSR FENABLE
	LDX #$20
	JSR FRPAGE
	JSR FDISABLE
	BPUT0 TWRDAT
	BPUT 1, 8192, DATABUF
	BPL DOLOOPW1
	JMP DOCOMER

DOLOOPW1 JMP DOLOOPN

; input start and number of banks
RRANGE	
	BPUT0 TSBANK
	JSR GETDEC
	BMI RRANGEX
	CPY #0
	BNE RRANGEX
	STX RSBANK
	CPX SIZEB
	BCS RRANGEX
	TXA
	JSR BNK2ADR
	
	STX FLASHADR+1
	STY FLASHADR+2

	LDA SIZE
	STA ENDADR
	LDA SIZE+1
	STA ENDADR+1
	LDA SIZE+2
	STA ENDADR+2
	LDA SIZE+3
	STA ENDADR+3
	
	BPUT0 TNBANK
	JSR GETDEC
	CPY #0
	BNE RRANGEX
	TXA
	STA RNBANK
	BEQ RRANGEE
	CLC
	ADC RSBANK
	BCS RRANGEX
	CMP SIZEB
	BCC ?RRANG1
	BEQ ?RRANG1

RRANGEX	LDY #$FF
	RTS

?RRANG1	JSR BNK2ADR
	STX ENDADR+1
	STY ENDADR+2

RRANGEE
;	JSR PFLADR
;	LDA #32
;	JSR PUTCHAR
;	LDA ENDADR+2
;	JSR PUTHEX
;	LDA ENDADR+1
;	JSR PUTHEX
;	LDA ENDADR
;	JSR PUTHEX
;	LDA #155
;	JSR PUTCHAR

	LDY #0
	RTS

; starting bank
RSBANK	.BYTE 0

; number of banks (0 = to end)
RNBANK	.BYTE 0

; erase flash chip (manually)
DOERAS	JSR PUTCHAR
	LDA #155
	JSR PUTCHAR
	LDA #155
	JSR PUTCHAR

	BPUT0 TASKER
	JSR YESNO
	BEQ DOERAS1
	JMP MAINLP

DOERAS1	LDA #155
	JSR PUTCHAR
	LDA #155
	JSR PUTCHAR

	JSR ERASEF

	BMI DOCONT

DOCONTS	BPUT0 TFINI

DOCONT	BPUT0 TCONT
	JSR GETCHAR
	JMP MAINLP

; common chip erase code
ERASEF	BPUT0 TERAS

	JSR FADRZERO
	JSR FENABLE
	JSR FCERAS

	PHP
	LDA NUMCHIP
	CMP #2
	BCC ERASEF1

	PLA
	STA TMPSTAT
	LDA FSIZE+2
	STA FLASHADR+2
	JSR FCERAS
	PHP
	PLA
	ORA TMPSTAT
	PHA
	LDA #0
	STA FLASHADR+2
ERASEF1	PLP

	PHP
	PHP
	JSR FDISABLE
	PLP
	JSR PSTAT
	PLP
	RTS

	
INIT	LDA 106
	STA M106
	LDA 740
	STA M740
	LDA #$80
	STA 106
	STA 740
	JSR GR0

	LDA $D301
	STA MD301
	ORA #2
	STA $D301
	RTS

CLEANUP	LDA MD301
	STA $D301
	LDA M106
	STA 106
	LDA M740
	STA 740
	JMP GR0

M106	.BYTE 0
M740	.BYTE 0
MD301	.BYTE 0

.if .def FREEZER2005
TTITLE  .BYTE 125, "Freezer 2005 Flash Writer V0.51",155
.endif
.if .def FREEZER2011
TTITLE  .BYTE 125, "Freezer 2011 Flash Writer V0.51",155
.endif
.if .def ATARIMAX8
TTITLE  .BYTE 125, "AtariMax 8MBit FlashCart Writer V0.51",155
.endif
.if .def MEGAMAX16
TTITLE  .BYTE 125, "Megamax 16k FlashCart Writer V0.51",155
.endif
.if .def MEGA512
TTITLE  .BYTE 125, "Mega 512k FlashCart Writer V0.51",155
.endif
.if .def MEGA4096
TTITLE  .BYTE 125, "4MB Mega FlashCart Writer V0.51",155
.endif
.if .def U1MB
TTITLE  .BYTE 125, "U1MB Flash Writer V0.51",155
.endif
TTITLEL	= * - TTITLE

TMENU	.BYTE 155
	.BYTE "1) Program flash",155
	.BYTE "2) Verify flash",155
	.BYTE "3) Write flash to file",155
	.BYTE "4) Erase flash",155
	.BYTE "0) Exit program",155
	.BYTE "> "
TMENUL	= * - TMENU

TASKER	.BYTE "Completely erase flash (y/n)? "
TASKERL	= * - TASKER

TFILNA	.BYTE "Filename > "
TFILNAL	= * - TFILNA

TOPENER	.BYTE "Error opening file!",155

TERAF	.BYTE " erase"
TERAFL	= * - TERAF

TERAS	.BYTE " erasing flash: "
TERASL	= * - TERAS

TRDDAT	.BYTE " read"
TRDDATL	= * - TRDDAT

TWRDAT	.BYTE " write"
TWRDATL	= * - TWRDAT

TPROGF	.BYTE " flash"
TPROGFL	= * - TPROGF

TVERIF	.BYTE " verify"
TVERIFL	= * - TVERIF

TFINI	.BYTE 155, "operation successfully completed",155
TFINIL	= * - TFINI

TCONT	.BYTE 155
	.BYTE "Press any key to continue > "
TCONTL	= * - TCONT

TSBANK	.BYTE "starting bank > 0",30
TSBANKL	= * - TSBANK

TNBANK	.BYTE "number of banks (0=to end) > 0",30
TNBANKL	= * - TNBANK

	.include "libflash.src"
	.include "cio.src"
	.include "iohelp.src"
	.include "iohelpfl.src"

BUF	.DC 128 0

	* = (*+255) & $FF00
DATABUF	= *

	.BANK
	* = $2E0
	.WORD START

