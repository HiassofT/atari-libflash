;  flash - simple flash programmer
;
;  Copyright (C) 2004-2010 Matthias Reichl <hias@horus.com>
;
;  This program is free software; you can redistribute it and/or modify
;  it under the terms of the GNU General Public License as published by
;  the Free Software Foundation; either version 2 of the License, or
;  (at your option) any later version.
;
;  This program is distributed in the hope that it will be useful,
;  but WITHOUT ANY WARRANTY; without even the implied warranty of
;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;  GNU General Public License for more details.
;
;  You should have received a copy of the GNU General Public License
;  along with this program; if not, write to the Free Software
;  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

	.include "cio.inc"
	.include "libflash.inc"

START	= $2000

	.BANK
	* = START

	JSR INIT

MAINLP	BPUT 0, TTITLEL, TTITLE
	JSR FINIT
	JSR FENABLE
	JSR FDETECT
	JSR FDISABLE

	LDA FTYPE
	JSR PFTYPE
	LDA FTYPE
	BPL MOK

	JSR GETCHAR
	CPY #128
	BNE MAINLP
	JMP EXIT

MOK	LDA FSIZE+2
	STA ENDHI
	LDA #1
	STA NUMCHIP
.if (.def ATARIMAX8 .or .def MEGAMAX16) .and .not .def ONECHIP
	ASL ENDHI
	INC NUMCHIP
.endif
	BPUT 0, TMENUL, TMENU
MENULP	JSR GETCHAR
	CPY #128
	BNE MENUL1
	JMP MAINLP
MENUL1	CMP #'0
	BNE NEXIT
EXIT	JSR CLEANUP
	JMP ($A)

NEXIT	CMP #'1
	BNE NO1

	LDX #MODEP
	JMP DOCOMMON

NO1	CMP #'2
	BNE NO2

	LDX #MODEV
	JMP DOCOMMON

NO2	CMP #'3
	BNE NO3

	LDX #MODED
	JMP DOCOMMON

NO3	CMP #'4
	BNE NO4

	JMP DOERAS

NO4	JMP MENULP

; common chip erase code
ERASEF	BPUT 0, TERASL, TERAS

	JSR FADRZERO
	JSR FENABLE
	JSR FCERAS

.if (.def ATARIMAX8 .or .def MEGAMAX16) .and .not .def ONECHIP
; also erase second chip, combine status results
	PHP
	LDA NUMCHIP
	CMP #2
	BCC AMAX1

	PLA
	STA TMPSTAT
	LDA FSIZE+2
	STA FLASHADR+2
	JSR FCERAS
	PHP
	PLA
	ORA TMPSTAT
	PHA
	LDA #0
	STA FLASHADR+2
AMAX1	PLP
.endif

	PHP
	PHP
	JSR FDISABLE
	PLP
	JSR PSTAT
	PLP
	RTS


; erase flash chip (manually)
DOERAS	JSR PUTCHAR
	LDA #155
	JSR PUTCHAR
	LDA #155
	JSR PUTCHAR

	BPUT 0, TASKERL, TASKER
	JSR YESNO
	BEQ DOERAS1
	JMP MAINLP

DOERAS1	LDA #155
	JSR PUTCHAR
	LDA #155
	JSR PUTCHAR

	JSR ERASEF

	BMI DOCONT

DOCONTS	BPUT 0, TFINIL, TFINI

DOCONT	BPUT 0, TCONTL, TCONT
	JSR GETCHAR
	JMP MAINLP

MODE	.BYTE 0
MODEP	= $00	; program flash
MODEV	= $40	; verify
MODED	= $80	; dump flash to file

; 3rd byte of flash size (2=128k, 8=512k, 16=1024k)
ENDHI	.BYTE 0

; number of flash chips
NUMCHIP	.BYTE 0

TMPSTAT	.BYTE 0

; common entry point
DOCOMMON
	STX MODE

	JSR PUTCHAR
	LDA #155
	JSR PUTCHAR
	LDA #155
	JSR PUTCHAR

; flash offset 0
	JSR FADRZERO

; set data buffer address
	LDA #<DATABUF
	STA DATAADR
	LDA #>DATABUF
	STA DATAADR+1

	BPUT 0, TFILNAL, TFILNA
	JSR GETFN
	BPL DOCOMM1
	JMP MAINLP

DOCOMM1	BIT MODE
	BMI DOCOMM2
	OPEN 1,4,0,FNBUF
	JMP DOCOMM3

DOCOMM2	OPEN 1,8,0,FNBUF
DOCOMM3	BPL DOCOMM4
	CLOSE 1
	PRINT 0, TOPENER
	JMP DOCONT

DOCOMM4	LDA #155
	JSR PUTCHAR

	LDA MODE
	CMP #MODEP
	BNE DOLOOP

	JSR ERASEF
	BPL DOLOOP
	BMI DOCOMEX

DOCOMER
	JSR PERROR

DOCOMEX	CLOSE 1
	JMP DOCONT

; flash/write/verify data, depending on MODE
DOLOOP	BIT MODE
	BPL DOLOOP0	; flash/verify mode
	JMP DOLOOPW	; write mode

; flash/verify: check if we have some more data
DOLOOP0	BGET 1, 1, DATABUF
	BPL DOLOOP1

; no, end of file
DOLPOK	CLOSE 1
	JMP DOCONTS	; report success

DOLOOP1	JSR PFLADR

; read rest of data block
	BPUT 0, TRDDATL, TRDDAT
	BGET 1, 8191, DATABUF+1
	BPL DOLOOP2
	JMP DOCOMER

DOLOOP2	BIT MODE
	BVS DOLOOPV	; verify flash

; program block
	BPUT 0, TPROGFL, TPROGF

	JSR FENABLE
	LDX #$20
	JSR FWPAGE
	PHP
	JSR FDISABLE
	PLP

; entry: check for error
DOLPST	BPL DOLOOPN

; print error plus address
DOLPERA	JSR PERRADR
	JSR PERRTYP
	JMP DOCOMEX

; print ok and go on to next block
DOLOOPN	JSR POK
	CLC
	LDA FLASHADR+1
	ADC #$20
	STA FLASHADR+1
	BCC DOLOOP3
	INC FLASHADR+2

DOLOOP3	LDA FLASHADR+2
	CMP ENDHI
	BEQ DOLOOPX
	JMP DOLOOP

DOLOOPX	JMP DOLPOK

; verify block
DOLOOPV	BPUT 0, TVERIFL, TVERIF
	JSR FENABLE
	LDX #$20
	JSR FCPAGE
	PHP
	JSR FDISABLE
	PLP
	JMP DOLPST

; write block to file
DOLOOPW	JSR PFLADR
	JSR FENABLE
	LDX #$20
	JSR FRPAGE
	JSR FDISABLE
	BPUT 0, TWRDATL, TWRDAT
	BPUT 1, 8192, DATABUF
	BPL DOLOOP4
	JMP DOCOMER

DOLOOP4	JMP DOLOOPN

INIT	LDA 106
	STA M106
	LDA 740
	STA M740
	LDA #$80
	STA 106
	STA 740
	JSR GR0

	LDA $D301
	STA MD301
	ORA #2
	STA $D301
	RTS

CLEANUP	LDA MD301
	STA $D301
	LDA M106
	STA 106
	LDA M740
	STA 740
	JMP GR0

M106	.BYTE 0
M740	.BYTE 0
MD301	.BYTE 0

.if .def ATARIMAX8
.if .def ONECHIP
TTITLE  .BYTE 125, "AtariMax 4MBit FlashCart Writer V0.5",155
.else
TTITLE  .BYTE 125, "AtariMax 8MBit FlashCart Writer V0.5",155
.endif
.endif
.if .def MEGAMAX16
TTITLE  .BYTE 125, "Megamax 16k FlashCart Writer V0.5",155
.endif
.if .def MEGA512
TTITLE  .BYTE 125, "Mega 512k FlashCart Writer V0.5",155
.endif
.if .def MEGA4096
TTITLE  .BYTE 125, "4MB Mega FlashCart Writer V0.5",155
.endif
.if .def U1MB
TTITLE  .BYTE 125, "U1MB Flash Writer V0.5",155
.endif
TTITLEL	= * - TTITLE

TMENU	.BYTE 155
	.BYTE "1) Program flash cart",155
	.BYTE "2) Verify flash cart",155
	.BYTE "3) Write flash cart to file",155
	.BYTE "4) Erase flash cart",155
	.BYTE "0) Exit program",155
	.BYTE "> "
TMENUL	= * - TMENU

TASKER	.BYTE "Completely erase flash cart (y/n)? "
TASKERL	= * - TASKER

TFILNA	.BYTE "Filename > "
TFILNAL	= * - TFILNA

TOPENER	.BYTE "Error opening file!",155

TERAS	.BYTE " erasing cart: "
TERASL	= * - TERAS

TRDDAT	.BYTE " read"
TRDDATL	= * - TRDDAT

TWRDAT	.BYTE " write"
TWRDATL	= * - TWRDAT

TPROGF	.BYTE " flash"
TPROGFL	= * - TPROGF

TVERIF	.BYTE " verify"
TVERIFL	= * - TVERIF

TFINI	.BYTE 155, "operation successfully completed",155
TFINIL	= * - TFINI

TCONT	.BYTE 155
	.BYTE "Press any key to continue > "
TCONTL	= * - TCONT



	.include "libflash.src"
	.include "cio.src"
	.include "iohelp.src"
	.include "iohelpfl.src"

BUF	.DC 128 0

	* = (*+255) & $FF00
DATABUF	= *

	.BANK
	* = $2E0
	.WORD START

